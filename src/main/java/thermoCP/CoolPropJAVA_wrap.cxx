/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>

SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< double > >::const_reference std_vector_Sl_std_vector_Sl_double_Sg__Sg__get(std::vector< std::vector< double > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_double_Sg__Sg__set(std::vector< std::vector< double > > *self,int i,std::vector< std::vector< double > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::vector< std::string > >::const_reference std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__get(std::vector< std::vector< std::string > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__set(std::vector< std::vector< std::string > > *self,int i,std::vector< std::vector< std::string > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include "DataStructures.h"
#include "AbstractState.h"
#include "CoolProp.h"
#include "PhaseEnvelope.h"
#define SWIG
#include "Configuration.h"
#undef SWIG
#include "HumidAirProp.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_new_1DoubleVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< double > *)new std::vector< double >();
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_new_1DoubleVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< double >::size_type arg1 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< double >::size_type)jarg1; 
  result = (std::vector< double > *)new std::vector< double >(arg1);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_DoubleVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_DoubleVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_DoubleVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_DoubleVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = (bool)((std::vector< double > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_DoubleVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_DoubleVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  std::vector< double >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  temp2 = (std::vector< double >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_DoubleVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_DoubleVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  std::vector< double >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< double >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_delete_1DoubleVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< double > **)&jarg1; 
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_new_1VectorOfDoubleVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >();
  *(std::vector< std::vector< double > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_new_1VectorOfDoubleVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::vector< double > >::size_type arg1 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::vector< double > >::size_type)jarg1; 
  result = (std::vector< std::vector< double > > *)new std::vector< std::vector< double > >(arg1);
  *(std::vector< std::vector< double > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_VectorOfDoubleVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< double > > **)&jarg1; 
  result = ((std::vector< std::vector< double > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_VectorOfDoubleVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< double > > **)&jarg1; 
  result = ((std::vector< std::vector< double > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_VectorOfDoubleVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< double > > **)&jarg1; 
  arg2 = (std::vector< std::vector< double > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_VectorOfDoubleVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< double > > **)&jarg1; 
  result = (bool)((std::vector< std::vector< double > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_VectorOfDoubleVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< double > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_VectorOfDoubleVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  std::vector< std::vector< double > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::vector< double > > **)&jarg1; 
  arg2 = *(std::vector< std::vector< double > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< double > >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< std::vector< double > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_VectorOfDoubleVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< double > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< double > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< double > >::value_type *) &std_vector_Sl_std_vector_Sl_double_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::vector< double > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_VectorOfDoubleVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< double > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::vector< double > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::vector< double > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< double > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_double_Sg__Sg__set(arg1,arg2,(std::vector< double > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_delete_1VectorOfDoubleVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< double > > *arg1 = (std::vector< std::vector< double > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::vector< double > > **)&jarg1; 
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_new_1StringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_new_1StringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_StringVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_StringVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_StringVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_StringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_StringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_StringVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_thermoCP_CoolPropJNI_StringVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_StringVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_delete_1StringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_new_1VectorOfStringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::vector< std::string > > *)new std::vector< std::vector< std::string > >();
  *(std::vector< std::vector< std::string > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_new_1VectorOfStringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::string > >::size_type arg1 ;
  std::vector< std::vector< std::string > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::vector< std::string > >::size_type)jarg1; 
  result = (std::vector< std::vector< std::string > > *)new std::vector< std::vector< std::string > >(arg1);
  *(std::vector< std::vector< std::string > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_VectorOfStringVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::string > > **)&jarg1; 
  result = ((std::vector< std::vector< std::string > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_VectorOfStringVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::string > > **)&jarg1; 
  result = ((std::vector< std::vector< std::string > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_VectorOfStringVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::string > > **)&jarg1; 
  arg2 = (std::vector< std::vector< std::string > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_VectorOfStringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::string > > **)&jarg1; 
  result = (bool)((std::vector< std::vector< std::string > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_VectorOfStringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::string > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_VectorOfStringVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  std::vector< std::vector< std::string > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::vector< std::string > > **)&jarg1; 
  arg2 = *(std::vector< std::vector< std::string > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< std::string > >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< std::vector< std::string > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_VectorOfStringVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< std::string > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::vector< std::string > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::vector< std::string > >::value_type *) &std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::vector< std::string > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_VectorOfStringVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::vector< std::string > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::vector< std::string > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::vector< std::string > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::vector< std::string > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_vector_Sl_std_string_Sg__Sg__set(arg1,arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_delete_1VectorOfStringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::vector< std::string > > *arg1 = (std::vector< std::vector< std::string > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::vector< std::string > > **)&jarg1; 
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_SimpleState_1rhomolar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::SimpleState **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rhomolar = arg2;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_SimpleState_1rhomolar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::SimpleState **)&jarg1; 
  result = (double) ((arg1)->rhomolar);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_SimpleState_1T_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::SimpleState **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->T = arg2;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_SimpleState_1T_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::SimpleState **)&jarg1; 
  result = (double) ((arg1)->T);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_SimpleState_1p_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::SimpleState **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->p = arg2;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_SimpleState_1p_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::SimpleState **)&jarg1; 
  result = (double) ((arg1)->p);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_SimpleState_1hmolar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::SimpleState **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->hmolar = arg2;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_SimpleState_1hmolar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::SimpleState **)&jarg1; 
  result = (double) ((arg1)->hmolar);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_SimpleState_1smolar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::SimpleState **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->smolar = arg2;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_SimpleState_1smolar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::SimpleState **)&jarg1; 
  result = (double) ((arg1)->smolar);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_SimpleState_1umolar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::SimpleState **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->umolar = arg2;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_SimpleState_1umolar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::SimpleState **)&jarg1; 
  result = (double) ((arg1)->umolar);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_SimpleState_1Q_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::SimpleState **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->Q = arg2;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_SimpleState_1Q_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::SimpleState **)&jarg1; 
  result = (double) ((arg1)->Q);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_new_1SimpleState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CoolProp::SimpleState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (CoolProp::SimpleState *)new CoolProp::SimpleState();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(CoolProp::SimpleState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_SimpleState_1fill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::SimpleState **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->fill(arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_SimpleState_1is_1valid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::SimpleState **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->is_valid();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_delete_1SimpleState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CoolProp::SimpleState *arg1 = (CoolProp::SimpleState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CoolProp::SimpleState **)&jarg1; 
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_CriticalState_1stable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::CriticalState **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->stable = arg2;
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_CriticalState_1stable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::CriticalState **)&jarg1; 
  result = (bool) ((arg1)->stable);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_new_1CriticalState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CoolProp::CriticalState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (CoolProp::CriticalState *)new CoolProp::CriticalState();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(CoolProp::CriticalState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_delete_1CriticalState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CoolProp::CriticalState *arg1 = (CoolProp::CriticalState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CoolProp::CriticalState **)&jarg1; 
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_thermoCP_CoolPropJNI_SsatSimpleState_1SSAT_1MAX_1NOT_1SET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CoolProp::SsatSimpleState::SsatSimpleStateEnum result;
  
  (void)jenv;
  (void)jcls;
  result = (CoolProp::SsatSimpleState::SsatSimpleStateEnum)CoolProp::SsatSimpleState::SSAT_MAX_NOT_SET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_SsatSimpleState_1exists_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  CoolProp::SsatSimpleState::SsatSimpleStateEnum arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::SsatSimpleState **)&jarg1; 
  arg2 = (CoolProp::SsatSimpleState::SsatSimpleStateEnum)jarg2; 
  if (arg1) (arg1)->exists = arg2;
}


SWIGEXPORT jint JNICALL Java_thermoCP_CoolPropJNI_SsatSimpleState_1exists_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  CoolProp::SsatSimpleState::SsatSimpleStateEnum result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::SsatSimpleState **)&jarg1; 
  result = (CoolProp::SsatSimpleState::SsatSimpleStateEnum) ((arg1)->exists);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_new_1SsatSimpleState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CoolProp::SsatSimpleState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (CoolProp::SsatSimpleState *)new CoolProp::SsatSimpleState();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(CoolProp::SsatSimpleState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_delete_1SsatSimpleState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CoolProp::SsatSimpleState *arg1 = (CoolProp::SsatSimpleState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CoolProp::SsatSimpleState **)&jarg1; 
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_thermoCP_CoolPropJNI_INVALID_1PARAMETER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CoolProp::parameters result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (CoolProp::parameters)CoolProp::INVALID_PARAMETER;
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_thermoCP_CoolPropJNI_get_1parameter_1information(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  int arg1 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = CoolProp::get_parameter_information(arg1,(std::string const &)*arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_thermoCP_CoolPropJNI_get_1parameter_1index(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  CoolProp::parameters result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (CoolProp::parameters)CoolProp::get_parameter_index((std::string const &)*arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_thermoCP_CoolPropJNI_get_1phase_1index(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  CoolProp::phases result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (CoolProp::phases)CoolProp::get_phase_index((std::string const &)*arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_is_1trivial_1parameter(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = (bool)CoolProp::is_trivial_parameter(arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_is_1valid_1parameter(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  CoolProp::parameters *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(CoolProp::parameters **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolProp::parameters & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)CoolProp::is_valid_parameter((std::string const &)*arg1,*arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_is_1valid_1first_1derivative(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  CoolProp::parameters *arg2 = 0 ;
  CoolProp::parameters *arg3 = 0 ;
  CoolProp::parameters *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(CoolProp::parameters **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolProp::parameters & reference is null");
    return 0;
  } 
  arg3 = *(CoolProp::parameters **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolProp::parameters & reference is null");
    return 0;
  } 
  arg4 = *(CoolProp::parameters **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolProp::parameters & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)CoolProp::is_valid_first_derivative((std::string const &)*arg1,*arg2,*arg3,*arg4);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_is_1valid_1first_1saturation_1derivative(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  CoolProp::parameters *arg2 = 0 ;
  CoolProp::parameters *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(CoolProp::parameters **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolProp::parameters & reference is null");
    return 0;
  } 
  arg3 = *(CoolProp::parameters **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolProp::parameters & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)CoolProp::is_valid_first_saturation_derivative((std::string const &)*arg1,*arg2,*arg3);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_is_1valid_1second_1derivative(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  CoolProp::parameters *arg2 = 0 ;
  CoolProp::parameters *arg3 = 0 ;
  CoolProp::parameters *arg4 = 0 ;
  CoolProp::parameters *arg5 = 0 ;
  CoolProp::parameters *arg6 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(CoolProp::parameters **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolProp::parameters & reference is null");
    return 0;
  } 
  arg3 = *(CoolProp::parameters **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolProp::parameters & reference is null");
    return 0;
  } 
  arg4 = *(CoolProp::parameters **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolProp::parameters & reference is null");
    return 0;
  } 
  arg5 = *(CoolProp::parameters **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolProp::parameters & reference is null");
    return 0;
  } 
  arg6 = *(CoolProp::parameters **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolProp::parameters & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)CoolProp::is_valid_second_derivative((std::string const &)*arg1,*arg2,*arg3,*arg4,*arg5,*arg6);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_thermoCP_CoolPropJNI_get_1csv_1parameter_1list(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = CoolProp::get_csv_parameter_list();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_thermoCP_CoolPropJNI_INPUT_1PAIR_1INVALID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CoolProp::input_pairs result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (CoolProp::input_pairs)CoolProp::INPUT_PAIR_INVALID;
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_match_1pair(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5) {
  jboolean jresult = 0 ;
  CoolProp::parameters arg1 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolProp::parameters arg4 ;
  bool *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (CoolProp::parameters)jarg1; 
  arg2 = (CoolProp::parameters)jarg2; 
  arg3 = (CoolProp::parameters)jarg3; 
  arg4 = (CoolProp::parameters)jarg4; 
  arg5 = *(bool **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)CoolProp::match_pair(arg1,arg2,arg3,arg4,*arg5);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_thermoCP_CoolPropJNI_get_1input_1pair_1index(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  CoolProp::input_pairs result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (CoolProp::input_pairs)CoolProp::get_input_pair_index((std::string const &)*arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_thermoCP_CoolPropJNI_get_1input_1pair_1short_1desc(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  CoolProp::input_pairs arg1 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (CoolProp::input_pairs)jarg1; 
  {
    try {
      result = (std::string *) &CoolProp::get_input_pair_short_desc(arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_thermoCP_CoolPropJNI_get_1input_1pair_1long_1desc(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  CoolProp::input_pairs arg1 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (CoolProp::input_pairs)jarg1; 
  {
    try {
      result = (std::string *) &CoolProp::get_input_pair_long_desc(arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_split_1input_1pair(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3) {
  CoolProp::input_pairs arg1 ;
  CoolProp::parameters *arg2 = 0 ;
  CoolProp::parameters *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (CoolProp::input_pairs)jarg1; 
  arg2 = *(CoolProp::parameters **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolProp::parameters & reference is null");
    return ;
  } 
  arg3 = *(CoolProp::parameters **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolProp::parameters & reference is null");
    return ;
  } 
  {
    try {
      CoolProp::split_input_pair(arg1,*arg2,*arg3);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_thermoCP_CoolPropJNI_get_1mixture_1binary_1pair_1data(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = CoolProp::get_mixture_binary_pair_data((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_set_1mixture_1binary_1pair_1data(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jdouble jarg4) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  {
    try {
      CoolProp::set_mixture_binary_pair_data((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_thermoCP_CoolPropJNI_INVALID_1BACKEND_1FAMILY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CoolProp::backend_families result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (CoolProp::backend_families)CoolProp::INVALID_BACKEND_FAMILY;
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_thermoCP_CoolPropJNI_INVALID_1BACKEND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CoolProp::backends result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (CoolProp::backends)CoolProp::INVALID_BACKEND;
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_extract_1backend_1families(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  std::string arg1 ;
  CoolProp::backend_families *arg2 = 0 ;
  CoolProp::backend_families *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(CoolProp::backend_families **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolProp::backend_families & reference is null");
    return ;
  } 
  arg3 = *(CoolProp::backend_families **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolProp::backend_families & reference is null");
    return ;
  } 
  {
    try {
      CoolProp::extract_backend_families(arg1,*arg2,*arg3);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_extract_1backend_1families_1string(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  std::string arg1 ;
  CoolProp::backend_families *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(CoolProp::backend_families **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolProp::backend_families & reference is null");
    return ;
  } 
  arg3 = *(std::string **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  {
    try {
      CoolProp::extract_backend_families_string(arg1,*arg2,*arg3);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_thermoCP_CoolPropJNI_get_1backend_1string(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  CoolProp::backends arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (CoolProp::backends)jarg1; 
  {
    try {
      result = CoolProp::get_backend_string(arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_SpinodalData_1tau_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::SpinodalData *arg1 = (CoolProp::SpinodalData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::SpinodalData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->tau = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_SpinodalData_1tau_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::SpinodalData *arg1 = (CoolProp::SpinodalData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::SpinodalData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->tau);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_SpinodalData_1delta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::SpinodalData *arg1 = (CoolProp::SpinodalData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::SpinodalData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->delta = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_SpinodalData_1delta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::SpinodalData *arg1 = (CoolProp::SpinodalData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::SpinodalData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->delta);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_SpinodalData_1M1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::SpinodalData *arg1 = (CoolProp::SpinodalData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::SpinodalData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->M1 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_SpinodalData_1M1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::SpinodalData *arg1 = (CoolProp::SpinodalData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::SpinodalData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->M1);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_new_1SpinodalData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CoolProp::SpinodalData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (CoolProp::SpinodalData *)new CoolProp::SpinodalData();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(CoolProp::SpinodalData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_delete_1SpinodalData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CoolProp::SpinodalData *arg1 = (CoolProp::SpinodalData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CoolProp::SpinodalData **)&jarg1; 
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_GuessesStructure_1T_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::GuessesStructure **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->T = arg2;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_GuessesStructure_1T_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::GuessesStructure **)&jarg1; 
  result = (double) ((arg1)->T);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_GuessesStructure_1p_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::GuessesStructure **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->p = arg2;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_GuessesStructure_1p_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::GuessesStructure **)&jarg1; 
  result = (double) ((arg1)->p);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_GuessesStructure_1rhomolar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::GuessesStructure **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rhomolar = arg2;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_GuessesStructure_1rhomolar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::GuessesStructure **)&jarg1; 
  result = (double) ((arg1)->rhomolar);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_GuessesStructure_1hmolar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::GuessesStructure **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->hmolar = arg2;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_GuessesStructure_1hmolar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::GuessesStructure **)&jarg1; 
  result = (double) ((arg1)->hmolar);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_GuessesStructure_1smolar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::GuessesStructure **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->smolar = arg2;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_GuessesStructure_1smolar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::GuessesStructure **)&jarg1; 
  result = (double) ((arg1)->smolar);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_GuessesStructure_1rhomolar_1liq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::GuessesStructure **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rhomolar_liq = arg2;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_GuessesStructure_1rhomolar_1liq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::GuessesStructure **)&jarg1; 
  result = (double) ((arg1)->rhomolar_liq);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_GuessesStructure_1rhomolar_1vap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::GuessesStructure **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->rhomolar_vap = arg2;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_GuessesStructure_1rhomolar_1vap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::GuessesStructure **)&jarg1; 
  result = (double) ((arg1)->rhomolar_vap);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_GuessesStructure_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::GuessesStructure **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->x = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_GuessesStructure_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::GuessesStructure **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->x);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_GuessesStructure_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::GuessesStructure **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->y = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_GuessesStructure_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::GuessesStructure **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->y);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_new_1GuessesStructure(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CoolProp::GuessesStructure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (CoolProp::GuessesStructure *)new CoolProp::GuessesStructure();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(CoolProp::GuessesStructure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_GuessesStructure_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::GuessesStructure **)&jarg1; 
  {
    try {
      (arg1)->clear();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_delete_1GuessesStructure(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CoolProp::GuessesStructure *arg1 = (CoolProp::GuessesStructure *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CoolProp::GuessesStructure **)&jarg1; 
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_delete_1AbstractState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1factory_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  CoolProp::AbstractState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (CoolProp::AbstractState *)CoolProp::AbstractState::factory((std::string const &)*arg1,(std::string const &)*arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(CoolProp::AbstractState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1factory_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::string > *arg2 = 0 ;
  CoolProp::AbstractState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (CoolProp::AbstractState *)CoolProp::AbstractState::factory((std::string const &)*arg1,(std::vector< std::string > const &)*arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(CoolProp::AbstractState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1set_1T(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (CoolPropDbl)jarg2; 
  {
    try {
      (arg1)->set_T(arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1backend_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->backend_name();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1using_1mole_1fractions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->using_mole_fractions();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1using_1mass_1fractions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->using_mass_fractions();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1using_1volu_1fractions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->using_volu_fractions();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1set_1reference_1stateS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->set_reference_stateS((std::string const &)*arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1set_1reference_1stateD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->set_reference_stateD(arg2,arg3,arg4,arg5);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1set_1mole_1fractions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_mole_fractions((std::vector< double > const &)*arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1set_1mass_1fractions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_mass_fractions((std::vector< double > const &)*arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1set_1volu_1fractions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->set_volu_fractions((std::vector< double > const &)*arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1mole_1fractions_1liquid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::vector< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->mole_fractions_liquid_double();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1mole_1fractions_1vapor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::vector< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->mole_fractions_vapor_double();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1get_1mole_1fractions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::vector< CoolPropDbl > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (std::vector< CoolPropDbl > *) &(arg1)->get_mole_fractions();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< CoolPropDbl > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1get_1mass_1fractions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  SwigValueWrapper< std::vector< CoolPropDbl > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->get_mass_fractions();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< CoolPropDbl > **)&jresult = new std::vector< CoolPropDbl >((const std::vector< CoolPropDbl > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::input_pairs arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (CoolProp::input_pairs)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->update(arg2,arg3,arg4);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1update_1with_1guesses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jdouble jarg4, jlong jarg5, jobject jarg5_) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::input_pairs arg2 ;
  double arg3 ;
  double arg4 ;
  CoolProp::GuessesStructure *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (CoolProp::input_pairs)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = *(CoolProp::GuessesStructure **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolProp::GuessesStructure const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->update_with_guesses(arg2,arg3,arg4,(CoolProp::GuessesStructure const &)*arg5);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1available_1in_1high_1level(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->available_in_high_level();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1fluid_1param_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->fluid_param_string((std::string const &)*arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1fluid_1names(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->fluid_names();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1get_1fluid_1constant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  CoolProp::parameters arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  arg3 = (CoolProp::parameters)jarg3; 
  {
    try {
      result = (double)((CoolProp::AbstractState const *)arg1)->get_fluid_constant(arg2,arg3);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1set_1binary_1interaction_1double_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jdouble jarg5) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->set_binary_interaction_double((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1set_1binary_1interaction_1double_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4, jdouble jarg5) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  std::size_t arg3 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  arg3 = (std::size_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (double)jarg5; 
  {
    try {
      (arg1)->set_binary_interaction_double(arg2,arg3,(std::string const &)*arg4,arg5);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1set_1binary_1interaction_1string_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try {
      (arg1)->set_binary_interaction_string((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1set_1binary_1interaction_1string_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4, jstring jarg5) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  std::size_t arg3 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  arg3 = (std::size_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return ;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try {
      (arg1)->set_binary_interaction_string(arg2,arg3,(std::string const &)*arg4,(std::string const &)*arg5);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1get_1binary_1interaction_1double_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (double)(arg1)->get_binary_interaction_double((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1get_1binary_1interaction_1double_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  std::size_t arg3 ;
  std::string *arg4 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  arg3 = (std::size_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (double)(arg1)->get_binary_interaction_double(arg2,arg3,(std::string const &)*arg4);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1get_1binary_1interaction_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jstring jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (arg1)->get_binary_interaction_string((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1apply_1simple_1mixing_1rule(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  std::size_t arg3 ;
  std::string *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  arg3 = (std::size_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      (arg1)->apply_simple_mixing_rule(arg2,arg3,(std::string const &)*arg4);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1set_1cubic_1alpha_1C(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      (arg1)->set_cubic_alpha_C(arg2,(std::string const &)*arg3,arg4,arg5,arg6);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1set_1fluid_1parameter_1double(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jdouble jarg4) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->set_fluid_parameter_double(arg2,(std::string const &)*arg3,arg4);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->clear();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1get_1reducing_1state(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::SimpleState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (CoolProp::SimpleState *) &(arg1)->get_reducing_state();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(CoolProp::SimpleState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1get_1state(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  CoolProp::SimpleState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (CoolProp::SimpleState *) &(arg1)->get_state((std::string const &)*arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(CoolProp::SimpleState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1Tmin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->Tmin();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1Tmax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->Tmax();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1pmax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->pmax();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1Ttriple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->Ttriple();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1phase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::phases result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (CoolProp::phases)(arg1)->phase();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1specify_1phase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::phases arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (CoolProp::phases)jarg2; 
  {
    try {
      (arg1)->specify_phase(arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1unspecify_1phase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      (arg1)->unspecify_phase();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1T_1critical(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->T_critical();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1p_1critical(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->p_critical();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1rhomolar_1critical(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->rhomolar_critical();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1rhomass_1critical(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->rhomass_critical();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1all_1critical_1points(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  SwigValueWrapper< std::vector< CoolProp::CriticalState > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->all_critical_points();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< CoolProp::CriticalState > **)&jresult = new std::vector< CoolProp::CriticalState >((const std::vector< CoolProp::CriticalState > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1build_1spinodal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      (arg1)->build_spinodal();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1get_1spinodal_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::SpinodalData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->get_spinodal_data();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(CoolProp::SpinodalData **)&jresult = new CoolProp::SpinodalData((const CoolProp::SpinodalData &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1criticality_1contour_1values(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg3 = *(double **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->criticality_contour_values(*arg2,*arg3);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1tangent_1plane_1distance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jobject jarg4_, jdouble jarg5) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double arg2 ;
  double arg3 ;
  std::vector< double > *arg4 = 0 ;
  double arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(std::vector< double > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null");
    return 0;
  } 
  arg5 = (double)jarg5; 
  {
    try {
      result = (double)(arg1)->tangent_plane_distance(arg2,arg3,(std::vector< double > const &)*arg4,arg5);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1tangent_1plane_1distance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jlong jarg4, jobject jarg4_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double arg2 ;
  double arg3 ;
  std::vector< double > *arg4 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = *(std::vector< double > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)(arg1)->tangent_plane_distance(arg2,arg3,(std::vector< double > const &)*arg4);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1T_1reducing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->T_reducing();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1rhomolar_1reducing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->rhomolar_reducing();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1rhomass_1reducing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->rhomass_reducing();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1p_1triple(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->p_triple();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->name();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1dipole_1moment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->dipole_moment();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1keyed_1output(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (CoolProp::parameters)jarg2; 
  {
    try {
      result = (double)(arg1)->keyed_output(arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1trivial_1keyed_1output(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (CoolProp::parameters)jarg2; 
  {
    try {
      result = (double)(arg1)->trivial_keyed_output(arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1saturated_1liquid_1keyed_1output(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (CoolProp::parameters)jarg2; 
  {
    try {
      result = (double)(arg1)->saturated_liquid_keyed_output(arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1saturated_1vapor_1keyed_1output(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (CoolProp::parameters)jarg2; 
  {
    try {
      result = (double)(arg1)->saturated_vapor_keyed_output(arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1T(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->T();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1rhomolar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->rhomolar();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1rhomass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->rhomass();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1p(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->p();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1Q(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->Q();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1tau(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->tau();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1delta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->delta();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1molar_1mass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->molar_mass();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1acentric_1factor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->acentric_factor();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1gas_1constant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->gas_constant();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1Bvirial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->Bvirial();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1dBvirial_1dT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->dBvirial_dT();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1Cvirial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->Cvirial();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1dCvirial_1dT(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->dCvirial_dT();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1compressibility_1factor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->compressibility_factor();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1hmolar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->hmolar();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1hmass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->hmass();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1hmolar_1excess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->hmolar_excess();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1hmass_1excess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->hmass_excess();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1smolar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->smolar();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1smass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->smass();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1smolar_1excess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->smolar_excess();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1smass_1excess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->smass_excess();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1umolar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->umolar();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1umass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->umass();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1umolar_1excess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->umolar_excess();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1umass_1excess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->umass_excess();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1cpmolar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->cpmolar();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1cpmass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->cpmass();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1cp0molar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->cp0molar();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1cp0mass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->cp0mass();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1cvmolar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->cvmolar();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1cvmass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->cvmass();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1gibbsmolar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->gibbsmolar();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1gibbsmass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->gibbsmass();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1gibbsmolar_1excess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->gibbsmolar_excess();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1gibbsmass_1excess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->gibbsmass_excess();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1helmholtzmolar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->helmholtzmolar();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1helmholtzmass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->helmholtzmass();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1helmholtzmolar_1excess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->helmholtzmolar_excess();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1helmholtzmass_1excess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->helmholtzmass_excess();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1volumemolar_1excess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->volumemolar_excess();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1volumemass_1excess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->volumemass_excess();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1speed_1sound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->speed_sound();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1isothermal_1compressibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->isothermal_compressibility();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1isobaric_1expansion_1coefficient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->isobaric_expansion_coefficient();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1fugacity_1coefficient(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  {
    try {
      result = (double)(arg1)->fugacity_coefficient(arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1fugacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  {
    try {
      result = (double)(arg1)->fugacity(arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1chemical_1potential(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  {
    try {
      result = (double)(arg1)->chemical_potential(arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1fundamental_1derivative_1of_1gas_1dynamics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->fundamental_derivative_of_gas_dynamics();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1PIP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->PIP();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1true_1critical_1point(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = *(double **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  arg3 = *(double **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "double & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->true_critical_point(*arg2,*arg3);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1ideal_1curve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  std::vector< double > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< double > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return ;
  } 
  arg4 = *(std::vector< double > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->ideal_curve((std::string const &)*arg2,*arg3,*arg4);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1first_1partial_1deriv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolProp::parameters arg4 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (CoolProp::parameters)jarg2; 
  arg3 = (CoolProp::parameters)jarg3; 
  arg4 = (CoolProp::parameters)jarg4; 
  {
    try {
      result = (arg1)->first_partial_deriv(arg2,arg3,arg4);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1second_1partial_1deriv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolProp::parameters arg4 ;
  CoolProp::parameters arg5 ;
  CoolProp::parameters arg6 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (CoolProp::parameters)jarg2; 
  arg3 = (CoolProp::parameters)jarg3; 
  arg4 = (CoolProp::parameters)jarg4; 
  arg5 = (CoolProp::parameters)jarg5; 
  arg6 = (CoolProp::parameters)jarg6; 
  {
    try {
      result = (arg1)->second_partial_deriv(arg2,arg3,arg4,arg5,arg6);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1first_1saturation_1deriv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (CoolProp::parameters)jarg2; 
  arg3 = (CoolProp::parameters)jarg3; 
  {
    try {
      result = (arg1)->first_saturation_deriv(arg2,arg3);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1second_1saturation_1deriv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolProp::parameters arg4 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (CoolProp::parameters)jarg2; 
  arg3 = (CoolProp::parameters)jarg3; 
  arg4 = (CoolProp::parameters)jarg4; 
  {
    try {
      result = (arg1)->second_saturation_deriv(arg2,arg3,arg4);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1first_1two_1phase_1deriv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolProp::parameters arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (CoolProp::parameters)jarg2; 
  arg3 = (CoolProp::parameters)jarg3; 
  arg4 = (CoolProp::parameters)jarg4; 
  {
    try {
      result = (double)(arg1)->first_two_phase_deriv(arg2,arg3,arg4);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1second_1two_1phase_1deriv(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolProp::parameters arg4 ;
  CoolProp::parameters arg5 ;
  CoolProp::parameters arg6 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (CoolProp::parameters)jarg2; 
  arg3 = (CoolProp::parameters)jarg3; 
  arg4 = (CoolProp::parameters)jarg4; 
  arg5 = (CoolProp::parameters)jarg5; 
  arg6 = (CoolProp::parameters)jarg6; 
  {
    try {
      result = (double)(arg1)->second_two_phase_deriv(arg2,arg3,arg4,arg5,arg6);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1first_1two_1phase_1deriv_1splined(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jdouble jarg5) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  CoolProp::parameters arg3 ;
  CoolProp::parameters arg4 ;
  double arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (CoolProp::parameters)jarg2; 
  arg3 = (CoolProp::parameters)jarg3; 
  arg4 = (CoolProp::parameters)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (double)(arg1)->first_two_phase_deriv_splined(arg2,arg3,arg4,arg5);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1build_1phase_1envelope_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->build_phase_envelope((std::string const &)*arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1build_1phase_1envelope_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      (arg1)->build_phase_envelope();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1get_1phase_1envelope_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::PhaseEnvelopeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (CoolProp::PhaseEnvelopeData *) &(arg1)->get_phase_envelope_data();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(CoolProp::PhaseEnvelopeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1has_1melting_1line(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->has_melting_line();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1melting_1line(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jdouble jarg4) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->melting_line(arg2,arg3,arg4);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1saturation_1ancillary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jdouble jarg5) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolProp::parameters arg2 ;
  int arg3 ;
  CoolProp::parameters arg4 ;
  double arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (CoolProp::parameters)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (CoolProp::parameters)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (double)(arg1)->saturation_ancillary(arg2,arg3,arg4,arg5);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1viscosity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->viscosity();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1viscosity_1contributions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl *arg2 = 0 ;
  CoolPropDbl *arg3 = 0 ;
  CoolPropDbl *arg4 = 0 ;
  CoolPropDbl *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = *(CoolPropDbl **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolPropDbl & reference is null");
    return ;
  } 
  arg3 = *(CoolPropDbl **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolPropDbl & reference is null");
    return ;
  } 
  arg4 = *(CoolPropDbl **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolPropDbl & reference is null");
    return ;
  } 
  arg5 = *(CoolPropDbl **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolPropDbl & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->viscosity_contributions(*arg2,*arg3,*arg4,*arg5);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1conductivity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->conductivity();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1conductivity_1contributions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl *arg2 = 0 ;
  CoolPropDbl *arg3 = 0 ;
  CoolPropDbl *arg4 = 0 ;
  CoolPropDbl *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = *(CoolPropDbl **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolPropDbl & reference is null");
    return ;
  } 
  arg3 = *(CoolPropDbl **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolPropDbl & reference is null");
    return ;
  } 
  arg4 = *(CoolPropDbl **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolPropDbl & reference is null");
    return ;
  } 
  arg5 = *(CoolPropDbl **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolPropDbl & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->conductivity_contributions(*arg2,*arg3,*arg4,*arg5);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1surface_1tension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->surface_tension();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1Prandtl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (double)(arg1)->Prandtl();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1conformal_1state(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::string *arg2 = 0 ;
  CoolPropDbl *arg3 = 0 ;
  CoolPropDbl *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(CoolPropDbl **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolPropDbl & reference is null");
    return ;
  } 
  arg4 = *(CoolPropDbl **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "CoolPropDbl & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->conformal_state((std::string const &)*arg2,*arg3,*arg4);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1change_1EOS(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  std::size_t arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->change_EOS(arg2,(std::string const &)*arg3);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1alpha0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->alpha0();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1dalpha0_1dDelta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->dalpha0_dDelta();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1dalpha0_1dTau(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->dalpha0_dTau();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1d2alpha0_1dDelta2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->d2alpha0_dDelta2();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1d2alpha0_1dDelta_1dTau(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->d2alpha0_dDelta_dTau();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1d2alpha0_1dTau2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->d2alpha0_dTau2();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1d3alpha0_1dTau3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->d3alpha0_dTau3();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1d3alpha0_1dDelta_1dTau2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->d3alpha0_dDelta_dTau2();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1d3alpha0_1dDelta2_1dTau(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->d3alpha0_dDelta2_dTau();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1d3alpha0_1dDelta3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->d3alpha0_dDelta3();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1alphar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->alphar();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1dalphar_1dDelta(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->dalphar_dDelta();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1dalphar_1dTau(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->dalphar_dTau();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1d2alphar_1dDelta2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->d2alphar_dDelta2();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1d2alphar_1dDelta_1dTau(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->d2alphar_dDelta_dTau();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1d2alphar_1dTau2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->d2alphar_dTau2();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1d3alphar_1dDelta3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->d3alphar_dDelta3();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1d3alphar_1dDelta2_1dTau(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->d3alphar_dDelta2_dTau();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1d3alphar_1dDelta_1dTau2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->d3alphar_dDelta_dTau2();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1d3alphar_1dTau3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->d3alphar_dTau3();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1d4alphar_1dDelta4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->d4alphar_dDelta4();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1d4alphar_1dDelta3_1dTau(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->d4alphar_dDelta3_dTau();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1d4alphar_1dDelta2_1dTau2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->d4alphar_dDelta2_dTau2();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1d4alphar_1dDelta_1dTau3(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->d4alphar_dDelta_dTau3();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_AbstractState_1d4alphar_1dTau4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CoolProp::AbstractState *arg1 = (CoolProp::AbstractState *) 0 ;
  CoolPropDbl result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::AbstractState **)&jarg1; 
  {
    try {
      result = (arg1)->d4alphar_dTau4();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_AbstractStateGenerator_1get_1AbstractState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  CoolProp::AbstractStateGenerator *arg1 = (CoolProp::AbstractStateGenerator *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  CoolProp::AbstractState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::AbstractStateGenerator **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  {
    try {
      result = (CoolProp::AbstractState *)(arg1)->get_AbstractState((std::vector< std::string > const &)*arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(CoolProp::AbstractState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_delete_1AbstractStateGenerator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CoolProp::AbstractStateGenerator *arg1 = (CoolProp::AbstractStateGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CoolProp::AbstractStateGenerator **)&jarg1; 
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_register_1backend(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  CoolProp::backend_families *arg1 = 0 ;
  SwigValueWrapper< shared_ptr< CoolProp::AbstractStateGenerator > > arg2 ;
  CoolProp::backend_families temp1 ;
  shared_ptr< CoolProp::AbstractStateGenerator > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  temp1 = (CoolProp::backend_families)jarg1; 
  arg1 = &temp1; 
  argp2 = *(shared_ptr< CoolProp::AbstractStateGenerator > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null shared_ptr< CoolProp::AbstractStateGenerator >");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      CoolProp::register_backend((enum CoolProp::backend_families const &)*arg1,arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_Props1SI(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jdouble jresult = 0 ;
  std::string arg1 ;
  std::string arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (double)CoolProp::Props1SI(arg1,arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_PropsSI(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jdouble jarg3, jstring jarg4, jdouble jarg5, jstring jarg6) {
  jdouble jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  std::string *arg6 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (double)jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  {
    try {
      result = (double)CoolProp::PropsSI((std::string const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5,(std::string const &)*arg6);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PropsSImulti(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_, jstring jarg4, jlong jarg5, jobject jarg5_, jstring jarg6, jlong jarg7, jobject jarg7_, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::vector< double > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::vector< double > *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::vector< std::string > *arg7 = 0 ;
  std::vector< double > *arg8 = 0 ;
  std::vector< std::vector< double > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg5_;
  (void)jarg7_;
  (void)jarg8_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< double > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null");
    return 0;
  } 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = *(std::vector< double > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null");
    return 0;
  } 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  arg7 = *(std::vector< std::string > **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  arg8 = *(std::vector< double > **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null");
    return 0;
  } 
  {
    try {
      result = CoolProp::PropsSImulti((std::vector< std::string > const &)*arg1,(std::string const &)*arg2,(std::vector< double > const &)*arg3,(std::string const &)*arg4,(std::vector< double > const &)*arg5,(std::string const &)*arg6,(std::vector< std::string > const &)*arg7,(std::vector< double > const &)*arg8);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::vector< std::vector< double > > **)&jresult = new std::vector< std::vector< double > >((const std::vector< std::vector< double > > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_thermoCP_CoolPropJNI_get_1debug_1level(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)CoolProp::get_debug_level();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_set_1debug_1level(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      CoolProp::set_debug_level(arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_set_1error_1string(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      CoolProp::set_error_string((std::string const &)*arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_set_1warning_1string(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      CoolProp::set_warning_string((std::string const &)*arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_saturation_1ancillary(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jint jarg3, jstring jarg4, jdouble jarg5) {
  jdouble jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (double)jarg5; 
  {
    try {
      result = (double)CoolProp::saturation_ancillary((std::string const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_thermoCP_CoolPropJNI_get_1global_1param_1string(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = CoolProp::get_global_param_string((std::string const &)*arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_thermoCP_CoolPropJNI_get_1fluid_1param_1string(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = CoolProp::get_fluid_param_string((std::string const &)*arg1,(std::string const &)*arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_is_1valid_1fluid_1string(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (bool)CoolProp::is_valid_fluid_string((std::string const &)*arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_add_1fluids_1as_1JSON(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jboolean jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (bool)CoolProp::add_fluids_as_JSON((std::string const &)*arg1,(std::string const &)*arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_set_1reference_1stateS(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      CoolProp::set_reference_stateS((std::string const &)*arg1,(std::string const &)*arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_set_1reference_1stateD(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5) {
  std::string *arg1 = 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      CoolProp::set_reference_stateD((std::string const &)*arg1,arg2,arg3,arg4,arg5);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_thermoCP_CoolPropJNI_PhaseSI(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jstring jarg3, jdouble jarg4, jstring jarg5) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  double arg2 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (double)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  std::string arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try {
      result = CoolProp::PhaseSI((std::string const &)*arg1,arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_extract_1backend(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  std::string arg1 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  arg3 = *(std::string **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  {
    try {
      CoolProp::extract_backend(arg1,*arg2,*arg3);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_thermoCP_CoolPropJNI_extract_1fractions(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< double > *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > & reference is null");
    return 0;
  } 
  {
    try {
      result = CoolProp::extract_fractions((std::string const &)*arg1,*arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_thermoCP_CoolPropJNI_phase_1lookup_1string(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  CoolProp::phases arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (CoolProp::phases)jarg1; 
  {
    try {
      result = CoolProp::phase_lookup_string(arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1TypeI_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->TypeI = arg2;
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1TypeI_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (bool) ((arg1)->TypeI);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1built_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->built = arg2;
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1built_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (bool) ((arg1)->built);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1iTsat_1max_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  if (arg1) (arg1)->iTsat_max = arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1iTsat_1max_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result =  ((arg1)->iTsat_max);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1ipsat_1max_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  if (arg1) (arg1)->ipsat_max = arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1ipsat_1max_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result =  ((arg1)->ipsat_max);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1icrit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  if (arg1) (arg1)->icrit = arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1icrit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result =  ((arg1)->icrit);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1T_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->T = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1T_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->T);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1p_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->p = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1p_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->p);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1lnT_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->lnT = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1lnT_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->lnT);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1lnp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->lnp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1lnp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->lnp);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1rhomolar_1liq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->rhomolar_liq = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1rhomolar_1liq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->rhomolar_liq);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1rhomolar_1vap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->rhomolar_vap = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1rhomolar_1vap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->rhomolar_vap);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1lnrhomolar_1liq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->lnrhomolar_liq = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1lnrhomolar_1liq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->lnrhomolar_liq);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1lnrhomolar_1vap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->lnrhomolar_vap = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1lnrhomolar_1vap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->lnrhomolar_vap);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1hmolar_1liq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->hmolar_liq = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1hmolar_1liq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->hmolar_liq);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1hmolar_1vap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->hmolar_vap = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1hmolar_1vap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->hmolar_vap);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1smolar_1liq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->smolar_liq = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1smolar_1liq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->smolar_liq);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1smolar_1vap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->smolar_vap = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1smolar_1vap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->smolar_vap);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1Q_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->Q = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1Q_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->Q);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1cpmolar_1liq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->cpmolar_liq = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1cpmolar_1liq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->cpmolar_liq);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1cpmolar_1vap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->cpmolar_vap = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1cpmolar_1vap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->cpmolar_vap);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1cvmolar_1liq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->cvmolar_liq = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1cvmolar_1liq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->cvmolar_liq);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1cvmolar_1vap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->cvmolar_vap = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1cvmolar_1vap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->cvmolar_vap);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1viscosity_1liq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->viscosity_liq = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1viscosity_1liq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->viscosity_liq);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1viscosity_1vap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->viscosity_vap = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1viscosity_1vap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->viscosity_vap);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1conductivity_1liq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->conductivity_liq = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1conductivity_1liq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->conductivity_liq);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1conductivity_1vap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->conductivity_vap = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1conductivity_1vap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->conductivity_vap);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1speed_1sound_1vap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2; 
  if (arg1) (arg1)->speed_sound_vap = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1speed_1sound_1vap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< double > *)& ((arg1)->speed_sound_vap);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1K_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< std::vector< double > > *arg2 = (std::vector< std::vector< double > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< std::vector< double > > **)&jarg2; 
  if (arg1) (arg1)->K = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1K_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< std::vector< double > > *)& ((arg1)->K);
  *(std::vector< std::vector< double > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1lnK_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< std::vector< double > > *arg2 = (std::vector< std::vector< double > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< std::vector< double > > **)&jarg2; 
  if (arg1) (arg1)->lnK = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1lnK_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< std::vector< double > > *)& ((arg1)->lnK);
  *(std::vector< std::vector< double > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< std::vector< double > > *arg2 = (std::vector< std::vector< double > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< std::vector< double > > **)&jarg2; 
  if (arg1) (arg1)->x = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< std::vector< double > > *)& ((arg1)->x);
  *(std::vector< std::vector< double > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< std::vector< double > > *arg2 = (std::vector< std::vector< double > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = *(std::vector< std::vector< double > > **)&jarg2; 
  if (arg1) (arg1)->y = *arg2;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::vector< std::vector< double > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  result = (std::vector< std::vector< double > > *)& ((arg1)->y);
  *(std::vector< std::vector< double > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_new_1PhaseEnvelopeData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CoolProp::PhaseEnvelopeData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (CoolProp::PhaseEnvelopeData *)new CoolProp::PhaseEnvelopeData();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(CoolProp::PhaseEnvelopeData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  std::size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = (std::size_t)jarg2; 
  {
    try {
      (arg1)->resize(arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  {
    try {
      (arg1)->clear();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1insert_1variables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9, jlong jarg10, jlong jarg11, jlong jarg12) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  CoolPropDbl arg2 ;
  CoolPropDbl arg3 ;
  CoolPropDbl arg4 ;
  CoolPropDbl arg5 ;
  CoolPropDbl arg6 ;
  CoolPropDbl arg7 ;
  CoolPropDbl arg8 ;
  CoolPropDbl arg9 ;
  std::vector< CoolPropDbl > *arg10 = 0 ;
  std::vector< CoolPropDbl > *arg11 = 0 ;
  std::size_t arg12 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = (CoolPropDbl)jarg2; 
  arg3 = (CoolPropDbl)jarg3; 
  arg4 = (CoolPropDbl)jarg4; 
  arg5 = (CoolPropDbl)jarg5; 
  arg6 = (CoolPropDbl)jarg6; 
  arg7 = (CoolPropDbl)jarg7; 
  arg8 = (CoolPropDbl)jarg8; 
  arg9 = (CoolPropDbl)jarg9; 
  arg10 = *(std::vector< CoolPropDbl > **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< CoolPropDbl > const & reference is null");
    return ;
  } 
  arg11 = *(std::vector< CoolPropDbl > **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< CoolPropDbl > const & reference is null");
    return ;
  } 
  arg12 = (std::size_t)jarg12; 
  {
    try {
      (arg1)->insert_variables(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,(std::vector< CoolPropDbl > const &)*arg10,(std::vector< CoolPropDbl > const &)*arg11,arg12);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_PhaseEnvelopeData_1store_1variables(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jdouble jarg9, jlong jarg10, jlong jarg11) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  CoolPropDbl arg2 ;
  CoolPropDbl arg3 ;
  CoolPropDbl arg4 ;
  CoolPropDbl arg5 ;
  CoolPropDbl arg6 ;
  CoolPropDbl arg7 ;
  CoolPropDbl arg8 ;
  CoolPropDbl arg9 ;
  std::vector< CoolPropDbl > *arg10 = 0 ;
  std::vector< CoolPropDbl > *arg11 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  arg2 = (CoolPropDbl)jarg2; 
  arg3 = (CoolPropDbl)jarg3; 
  arg4 = (CoolPropDbl)jarg4; 
  arg5 = (CoolPropDbl)jarg5; 
  arg6 = (CoolPropDbl)jarg6; 
  arg7 = (CoolPropDbl)jarg7; 
  arg8 = (CoolPropDbl)jarg8; 
  arg9 = (CoolPropDbl)jarg9; 
  arg10 = *(std::vector< CoolPropDbl > **)&jarg10;
  if (!arg10) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< CoolPropDbl > const & reference is null");
    return ;
  } 
  arg11 = *(std::vector< CoolPropDbl > **)&jarg11;
  if (!arg11) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< CoolPropDbl > const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->store_variables(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,(std::vector< CoolPropDbl > const &)*arg10,(std::vector< CoolPropDbl > const &)*arg11);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_delete_1PhaseEnvelopeData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CoolProp::PhaseEnvelopeData *arg1 = (CoolProp::PhaseEnvelopeData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CoolProp::PhaseEnvelopeData **)&jarg1; 
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_thermoCP_CoolPropJNI_CONFIGURATION_1NOT_1DEFINED_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  ConfigurationDataTypes result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (ConfigurationDataTypes)CONFIGURATION_NOT_DEFINED_TYPE;
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_thermoCP_CoolPropJNI_config_1key_1to_1string(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  configuration_keys arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (configuration_keys)jarg1; 
  {
    try {
      result = CoolProp::config_key_to_string(arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_thermoCP_CoolPropJNI_config_1string_1to_1key(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  configuration_keys result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (configuration_keys)CoolProp::config_string_to_key((std::string const &)*arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_thermoCP_CoolPropJNI_config_1key_1description_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  configuration_keys arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (configuration_keys)jarg1; 
  {
    try {
      result = CoolProp::config_key_description(arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_thermoCP_CoolPropJNI_config_1key_1description_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = CoolProp::config_key_description((std::string const &)*arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_new_1ConfigurationItem_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  configuration_keys arg1 ;
  bool arg2 ;
  CoolProp::ConfigurationItem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (configuration_keys)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (CoolProp::ConfigurationItem *)new CoolProp::ConfigurationItem(arg1,arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(CoolProp::ConfigurationItem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_new_1ConfigurationItem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  configuration_keys arg1 ;
  int arg2 ;
  CoolProp::ConfigurationItem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (configuration_keys)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (CoolProp::ConfigurationItem *)new CoolProp::ConfigurationItem(arg1,arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(CoolProp::ConfigurationItem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_new_1ConfigurationItem_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  jlong jresult = 0 ;
  configuration_keys arg1 ;
  double arg2 ;
  CoolProp::ConfigurationItem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (configuration_keys)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (CoolProp::ConfigurationItem *)new CoolProp::ConfigurationItem(arg1,arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(CoolProp::ConfigurationItem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_new_1ConfigurationItem_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  configuration_keys arg1 ;
  char *arg2 = (char *) 0 ;
  CoolProp::ConfigurationItem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (configuration_keys)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  {
    try {
      result = (CoolProp::ConfigurationItem *)new CoolProp::ConfigurationItem(arg1,(char const *)arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(CoolProp::ConfigurationItem **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_ConfigurationItem_1set_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  CoolProp::ConfigurationItem *arg1 = (CoolProp::ConfigurationItem *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::ConfigurationItem **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->set_bool(arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_ConfigurationItem_1set_1integer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CoolProp::ConfigurationItem *arg1 = (CoolProp::ConfigurationItem *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::ConfigurationItem **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->set_integer(arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_ConfigurationItem_1set_1double(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CoolProp::ConfigurationItem *arg1 = (CoolProp::ConfigurationItem *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::ConfigurationItem **)&jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->set_double(arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_ConfigurationItem_1set_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CoolProp::ConfigurationItem *arg1 = (CoolProp::ConfigurationItem *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::ConfigurationItem **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->set_string((std::string const &)*arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_thermoCP_CoolPropJNI_ConfigurationItem_1get_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CoolProp::ConfigurationItem *arg1 = (CoolProp::ConfigurationItem *) 0 ;
  configuration_keys result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::ConfigurationItem **)&jarg1; 
  {
    try {
      result = (configuration_keys)((CoolProp::ConfigurationItem const *)arg1)->get_key();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_delete_1ConfigurationItem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CoolProp::ConfigurationItem *arg1 = (CoolProp::ConfigurationItem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CoolProp::ConfigurationItem **)&jarg1; 
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_new_1Configuration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CoolProp::Configuration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (CoolProp::Configuration *)new CoolProp::Configuration();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(CoolProp::Configuration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_delete_1Configuration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CoolProp::Configuration *arg1 = (CoolProp::Configuration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CoolProp::Configuration **)&jarg1; 
  {
    try {
      delete arg1;
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_Configuration_1get_1item(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  CoolProp::Configuration *arg1 = (CoolProp::Configuration *) 0 ;
  configuration_keys arg2 ;
  CoolProp::ConfigurationItem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::Configuration **)&jarg1; 
  arg2 = (configuration_keys)jarg2; 
  {
    try {
      result = (CoolProp::ConfigurationItem *) &(arg1)->get_item(arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(CoolProp::ConfigurationItem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_Configuration_1add_1item(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CoolProp::Configuration *arg1 = (CoolProp::Configuration *) 0 ;
  SwigValueWrapper< CoolProp::ConfigurationItem > arg2 ;
  CoolProp::ConfigurationItem *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CoolProp::Configuration **)&jarg1; 
  argp2 = *(CoolProp::ConfigurationItem **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null CoolProp::ConfigurationItem");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->add_item(arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_Configuration_1get_1items(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CoolProp::Configuration *arg1 = (CoolProp::Configuration *) 0 ;
  std::map< configuration_keys,CoolProp::ConfigurationItem > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::Configuration **)&jarg1; 
  {
    try {
      result = (std::map< configuration_keys,CoolProp::ConfigurationItem > *) &(arg1)->get_items();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  *(std::map< configuration_keys,CoolProp::ConfigurationItem > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_Configuration_1set_1defaults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CoolProp::Configuration *arg1 = (CoolProp::Configuration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CoolProp::Configuration **)&jarg1; 
  {
    try {
      (arg1)->set_defaults();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_thermoCP_CoolPropJNI_get_1config_1bool(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  configuration_keys arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (configuration_keys)jarg1; 
  {
    try {
      result = (bool)CoolProp::get_config_bool(arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_get_1config_1double(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jdouble jresult = 0 ;
  configuration_keys arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (configuration_keys)jarg1; 
  {
    try {
      result = (double)CoolProp::get_config_double(arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_thermoCP_CoolPropJNI_get_1config_1string(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  configuration_keys arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (configuration_keys)jarg1; 
  {
    try {
      result = CoolProp::get_config_string(arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_thermoCP_CoolPropJNI_get_1config_1as_1json_1string(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = CoolProp::get_config_as_json_string();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_set_1config_1bool(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2) {
  configuration_keys arg1 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (configuration_keys)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      CoolProp::set_config_bool(arg1,arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_set_1config_1double(JNIEnv *jenv, jclass jcls, jint jarg1, jdouble jarg2) {
  configuration_keys arg1 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (configuration_keys)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      CoolProp::set_config_double(arg1,arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_set_1config_1string(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  configuration_keys arg1 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (configuration_keys)jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      CoolProp::set_config_string(arg1,(std::string const &)*arg2);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_set_1config_1as_1json_1string(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      CoolProp::set_config_as_json_string((std::string const &)*arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_HAPropsSI(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jdouble jarg3, jstring jarg4, jdouble jarg5, jstring jarg6, jdouble jarg7) {
  jdouble jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  std::string *arg6 = 0 ;
  double arg7 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (double)jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  arg7 = (double)jarg7; 
  {
    try {
      result = (double)HumidAir::HAPropsSI((std::string const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5,(std::string const &)*arg6,arg7);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_HAProps(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jdouble jarg3, jstring jarg4, jdouble jarg5, jstring jarg6, jdouble jarg7) {
  jdouble jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  std::string *arg4 = 0 ;
  double arg5 ;
  std::string *arg6 = 0 ;
  double arg7 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (double)jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return 0;
  std::string arg6_str(arg6_pstr);
  arg6 = &arg6_str;
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  arg7 = (double)jarg7; 
  {
    try {
      result = (double)HumidAir::HAProps((std::string const &)*arg1,(std::string const &)*arg2,arg3,(std::string const &)*arg4,arg5,(std::string const &)*arg6,arg7);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_HAProps_1Aux(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4, jstring jarg5) {
  jdouble jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  {
    try {
      result = (double)HumidAir::HAProps_Aux((char const *)arg1,arg2,arg3,arg4,arg5);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_IceProps(JNIEnv *jenv, jclass jcls, jstring jarg1, jdouble jarg2, jdouble jarg3) {
  jdouble jresult = 0 ;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)HumidAir::IceProps((char const *)arg1,arg2,arg3);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_UseVirialCorrelations(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      HumidAir::UseVirialCorrelations(arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_UseIsothermCompressCorrelation(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      HumidAir::UseIsothermCompressCorrelation(arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_UseIdealGasEnthalpyCorrelations(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      HumidAir::UseIdealGasEnthalpyCorrelations(arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_thermoCP_CoolPropJNI_HAHelp(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  {
    try {
      HumidAir::HAHelp();
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_thermoCP_CoolPropJNI_returnHumAirCode(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  {
    try {
      result = (int)HumidAir::returnHumAirCode((char const *)arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_thermoCP_CoolPropJNI_cair_1sat(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jdouble jresult = 0 ;
  double arg1 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  {
    try {
      result = (double)HumidAir::cair_sat(arg1);
    }  catch (std::exception &e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    } catch (...) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, "unknown exception"); return 0; 
      };
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_CriticalState_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(CoolProp::SimpleState **)&baseptr = *(CoolProp::CriticalState **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_thermoCP_CoolPropJNI_SsatSimpleState_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(CoolProp::SimpleState **)&baseptr = *(CoolProp::SsatSimpleState **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

